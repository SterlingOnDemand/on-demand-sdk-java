/*
 * Kennect-API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2017-12-08T12:41:25.475-08:00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package sts.oda.client.api;

import sts.oda.client.ApiException;
import sts.oda.client.model.AdverseActionRequest;
import sts.oda.client.model.BillingCodesResponse;
import sts.oda.client.model.CandidateDocumentResponse;
import sts.oda.client.model.CandidateRequest;
import sts.oda.client.model.CandidateResponse;
import sts.oda.client.model.ErrorResponse;
import sts.oda.client.model.HealthResponse;
import sts.oda.client.model.IdentityRequest;
import sts.oda.client.model.IdentityResponse;
import sts.oda.client.model.InviteResponse;
import sts.oda.client.model.OneTimeReportLinkResponse;
import sts.oda.client.model.PackagePriceResponse;
import sts.oda.client.model.PackageResponse;
import sts.oda.client.model.ReferenceCodesResponse;
import sts.oda.client.model.ScreeningRequest;
import sts.oda.client.model.ScreeningResponse;
import sts.oda.client.model.ScreeningSummaryResponse;
import sts.oda.client.model.SubscriptionEventsResponse;
import sts.oda.client.model.SubscriptionRequest;
import sts.oda.client.model.SubscriptionResponse;
import sts.oda.client.model.TrustedUserRequest;
import sts.oda.client.model.TrustedUserResponse;
import sts.oda.client.model.VerificationRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void billingCodesGetTest() throws ApiException {
        BillingCodesResponse response = api.billingCodesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesGetTest() throws ApiException {
        String limit = null;
        String offset = null;
        String givenName = null;
        String familyName = null;
        String clientReferenceId = null;
        String email = null;
        CandidateResponse response = api.candidatesGet(limit, offset, givenName, familyName, clientReferenceId, email);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesIdDocumentsGetTest() throws ApiException {
        String id = null;
        List<CandidateDocumentResponse> response = api.candidatesIdDocumentsGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesIdDocumentsPostTest() throws ApiException {
        String id = null;
        String accept = null;
        String fileName = null;
        api.candidatesIdDocumentsPost(id, accept, fileName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesIdGetTest() throws ApiException {
        String id = null;
        CandidateResponse response = api.candidatesIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesIdPutTest() throws ApiException {
        String id = null;
        CandidateRequest candidateRequest = null;
        CandidateResponse response = api.candidatesIdPut(id, candidateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesIdTrustPostTest() throws ApiException {
        String id = null;
        TrustedUserRequest trustedUserRequest = null;
        TrustedUserResponse response = api.candidatesIdTrustPost(id, trustedUserRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesPostTest() throws ApiException {
        CandidateRequest candidateRequest = null;
        CandidateResponse response = api.candidatesPost(candidateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void healthGetTest() throws ApiException {
        String deep = null;
        HealthResponse response = api.healthGet(deep);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void identitiesIdGetTest() throws ApiException {
        String id = null;
        IdentityResponse response = api.identitiesIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void identitiesIdRetryPostTest() throws ApiException {
        String id = null;
        IdentityResponse response = api.identitiesIdRetryPost(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void identitiesIdVerificationPutTest() throws ApiException {
        String id = null;
        VerificationRequest verificationRequest = null;
        IdentityResponse response = api.identitiesIdVerificationPut(id, verificationRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void identitiesPostTest() throws ApiException {
        IdentityRequest identityRequest = null;
        IdentityResponse response = api.identitiesPost(identityRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesGetTest() throws ApiException {
        String all = null;
        List<PackageResponse> response = api.packagesGet(all);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesIdPriceGetTest() throws ApiException {
        String id = null;
        String candidateId = null;
        PackagePriceResponse response = api.packagesIdPriceGet(id, candidateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void referenceCodesGetTest() throws ApiException {
        ReferenceCodesResponse response = api.referenceCodesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void screeningsGetTest() throws ApiException {
        List<ScreeningSummaryResponse> response = api.screeningsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void screeningsIdAdverseActionsPostTest() throws ApiException {
        String id = null;
        AdverseActionRequest adverseActionRequest = null;
        api.screeningsIdAdverseActionsPost(id, adverseActionRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void screeningsIdDocumentsPostTest() throws ApiException {
        String id = null;
        String accept = null;
        String documentType = null;
        String party = null;
        api.screeningsIdDocumentsPost(id, accept, documentType, party);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void screeningsIdGetTest() throws ApiException {
        String id = null;
        ScreeningResponse response = api.screeningsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void screeningsIdInvitePostTest() throws ApiException {
        String id = null;
        InviteResponse response = api.screeningsIdInvitePost(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void screeningsIdReportGetTest() throws ApiException {
        String id = null;
        String accept = null;
        Map<String, String> response = api.screeningsIdReportGet(id, accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void screeningsIdReportLinksPostTest() throws ApiException {
        String id = null;
        OneTimeReportLinkResponse response = api.screeningsIdReportLinksPost(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void screeningsIdReportPdfGetTest() throws ApiException {
        String id = null;
        String token = null;
        Map<String, String> response = api.screeningsIdReportPdfGet(id, token);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void screeningsPostTest() throws ApiException {
        ScreeningRequest screeningRequest = null;
        String idempotencyKey = null;
        ScreeningResponse response = api.screeningsPost(screeningRequest, idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionsIdDeleteTest() throws ApiException {
        String id = null;
        SubscriptionResponse response = api.subscriptionsIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionsIdEventsGetTest() throws ApiException {
        String id = null;
        SubscriptionEventsResponse response = api.subscriptionsIdEventsGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionsIdGetTest() throws ApiException {
        String id = null;
        SubscriptionResponse response = api.subscriptionsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionsPostTest() throws ApiException {
        SubscriptionRequest subscriptionRequest = null;
        SubscriptionResponse response = api.subscriptionsPost(subscriptionRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trustedUsersIdGetTest() throws ApiException {
        String id = null;
        TrustedUserResponse response = api.trustedUsersIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trustedUsersPostTest() throws ApiException {
        TrustedUserRequest trustedUserRequest = null;
        TrustedUserResponse response = api.trustedUsersPost(trustedUserRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trustsIdDeleteTest() throws ApiException {
        String id = null;
        api.trustsIdDelete(id);

        // TODO: test validations
    }
    
}
